// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  firstName   String?
  lastName    String?
  avatar      String?
  password    String
  role        Role     @default(USER)
  status      UserStatus @default(ACTIVE)
  emailVerified Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relationships
  workspaces      WorkspaceMember[]
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  videos          Video[]
  posts           Post[]
  comments        Comment[]
  notifications   Notification[]
  activities      Activity[]
  sessions        Session[]
  socialAccounts  SocialAccount[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model SocialAccount {
  id              String            @id @default(cuid())
  platform        Platform
  platformUserId  String
  displayName     String?
  username        String?
  profileImage    String?
  accessToken     String?
  refreshToken    String?
  tokenExpiry     DateTime?
  isConnected     Boolean           @default(true)
  uploadPostProfileId String?
  metadata        Json              @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relationships
  userId          String
  workspaceId     String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId, platform])
  @@map("social_accounts")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  avatar      String?
  settings    Json     @default("{}")
  plan        Plan     @default(FREE)
  status      WorkspaceStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  ownerId     String
  owner       User @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members     WorkspaceMember[]
  videos      Video[]
  posts       Post[]
  calendar    CalendarEvent[]
  analytics   Analytics[]
  campaigns   Campaign[]
  socialAccounts SocialAccount[]
  
  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  status      MemberStatus @default(ACTIVE)
  invitedAt   DateTime @default(now())
  joinedAt    DateTime?
  
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Video {
  id            String      @id @default(cuid())
  title         String
  description   String?
  topic         String
  style         VideoStyle  @default(CASUAL)
  duration      Int         // in seconds
  status        VideoStatus @default(GENERATING)
  heygenId      String?
  videoUrl      String?
  thumbnailUrl  String?
  script        String?
  settings      Json        @default("{}")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
  
  // Relationships
  workspaceId   String
  userId        String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  user          User @relation(fields: [userId], references: [id])
  posts         Post[]
  analytics     VideoAnalytics[]
  comments      Comment[]
  
  @@map("videos")
}

model Post {
  id          String     @id @default(cuid())
  platform    Platform
  caption     String?
  scheduledAt DateTime?
  publishedAt DateTime?
  status      PostStatus @default(DRAFT)
  platformPostId String?
  metrics     Json       @default("{}")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relationships
  workspaceId String
  userId      String
  videoId     String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  user        User @relation(fields: [userId], references: [id])
  video       Video? @relation(fields: [videoId], references: [id])
  analytics   PostAnalytics[]
  
  @@map("posts")
}

model CalendarEvent {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  allDay      Boolean   @default(false)
  type        EventType @default(VIDEO_CREATION)
  status      EventStatus @default(SCHEDULED)
  metadata    Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  
  @@map("calendar_events")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      CampaignStatus @default(DRAFT)
  goals       Json     @default("{}")
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  
  @@map("campaigns")
}

model Analytics {
  id          String   @id @default(cuid())
  date        DateTime
  metrics     Json
  period      AnalyticsPeriod @default(DAILY)
  createdAt   DateTime @default(now())
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  
  @@unique([workspaceId, date, period])
  @@map("analytics")
}

model VideoAnalytics {
  id        String   @id @default(cuid())
  date      DateTime
  views     Int      @default(0)
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  reach     Int      @default(0)
  createdAt DateTime @default(now())
  
  // Relationships
  videoId   String
  video     Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@unique([videoId, date])
  @@map("video_analytics")
}

model PostAnalytics {
  id          String   @id @default(cuid())
  date        DateTime
  impressions Int      @default(0)
  reach       Int      @default(0)
  engagement  Int      @default(0)
  clicks      Int      @default(0)
  saves       Int      @default(0)
  createdAt   DateTime @default(now())
  
  // Relationships
  postId      String
  post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([postId, date])
  @@map("post_analytics")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  userId    String
  videoId   String
  user      User @relation(fields: [userId], references: [id])
  video     Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  data      Json             @default("{}")
  createdAt DateTime         @default(now())
  
  // Relationships
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model Activity {
  id          String       @id @default(cuid())
  action      String
  description String
  metadata    Json         @default("{}")
  createdAt   DateTime     @default(now())
  
  // Relationships
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}

// Enums
enum Role {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum WorkspaceRole {
  OWNER
  ADMIN
  EDITOR
  MEMBER
  VIEWER
}

enum MemberStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum WorkspaceStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum VideoStyle {
  CASUAL
  PROFESSIONAL
  ENERGETIC
  EDUCATIONAL
}

enum VideoStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
  ARCHIVED
}

enum Platform {
  INSTAGRAM
  TIKTOK
  YOUTUBE
  FACEBOOK
  TWITTER
  LINKEDIN
  THREADS
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  ARCHIVED
}

enum EventType {
  VIDEO_CREATION
  POST_SCHEDULE
  CAMPAIGN_START
  CAMPAIGN_END
  MEETING
  DEADLINE
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum AnalyticsPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum NotificationType {
  VIDEO_COMPLETED
  POST_PUBLISHED
  COMMENT_ADDED
  MEMBER_JOINED
  CAMPAIGN_STARTED
  ANALYTICS_REPORT
  SYSTEM_UPDATE
  SOCIAL_ACCOUNT_CONNECTED
  SOCIAL_ACCOUNT_DISCONNECTED
}